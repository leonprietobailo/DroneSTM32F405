/*
  All-in-one setPWM
  This example shows how to configure a PWM with HardwareTimer in one single function call.
  PWM is generated on `LED_BUILTIN` if available.
  No interruption callback used: PWM is generated by hardware.
  Once configured, there is no CPU load.
*/

/*
  Note: Please verify that 'pin' used for PWM has HardwareTimer capability for your board
  This is specially true for F1 serie (BluePill, ...)
*/

//#if defined(LED_BUILTIN)
//#define pin  LED_BUILTIN
//#else
//#define pin  D2
//#endif

#define pin PC7

TIM_TypeDef *Instance = (TIM_TypeDef *)pinmap_peripheral(digitalPinToPinName(pin), PinMap_PWM);
uint32_t channel = STM_PIN_CHANNEL(pinmap_function(digitalPinToPinName(pin), PinMap_PWM));
HardwareTimer *MyTim = new HardwareTimer(Instance);

void setup()
{
  Serial.begin(57600);
  while(!Serial){
    delay(4);
  }
  //Serial.println(digitalPinToPinName(pin));
  //Serial.println(channel);
  // no need to configure pin, it will be done by HardwareTimer configuration
  // pinMode(pin, OUTPUT);

  // Automatically retrieve TIM instance and channel associated to pin
  // This is used to be compatible with all STM32 series automatically.
  


  // Instantiate HardwareTimer object. Thanks to 'new' instantiation, HardwareTimer is not destructed when setup() function is finished.
  

  // Configure and start PWM
  // MyTim->setPWM(channel, pin, 5, 10, NULL, NULL); // No callback required, we can simplify the function call
  MyTim->setPWM(channel, pin, 1, 50.5); // 5 Hertz, 10% dutycycle
  
}

uint32_t timer_cnt = 0;
void loop()
{
  timer_cnt = micros();
  //if (digitalRead(PC3) == HIGH){
    MyTim->pause();
    MyTim->setPWM(channel, pin, 1, 50.5);
    MyTim->resume();
  //}
//  else{
//    MyTim->pause();
//    MyTim->setPWM(channel, pin, 1, 90);
//    MyTim->resume();
//  }

  Serial.println(micros() - timer_cnt);
  delay(1000);
  
}
